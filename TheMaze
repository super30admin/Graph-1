//bfs -- it can be done with dfs also
//tc: O(m*n)
//sc: O(m*n)
//passed on leetcode: yes
class Solution {
    int m,n;
    int [][]dirs;
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        if (maze == null || maze.length == 0) return false;
        dirs = new int[][] {{-1,0}, {1,0}, {0,-1}, {0,1}};
        int m = maze.length; int n = maze[0].length;
        Queue <int[]> q = new LinkedList<>();
        q.add(start);
        while (!q.isEmpty()) {
            int [] curr = q.poll();
            for (int[] dir: dirs) {
                int r = curr[0];
                int  c = curr[1];
                while (r >=0 && r<m && c>=0 && c<n && maze[r][c] != 1) {
                    r += dir[0];
                    c += dir[1];
                }
                r-=dir[0];
                c-=dir[1];
                if (r == destination[0] && c == destination[1]) return true;
                if (maze[r][c] != 2) {
                    maze[r][c] = 2;
                    q.add(new int[] {r,c});
                }
            }
        }
        return false;
    }
}
