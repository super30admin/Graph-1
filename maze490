class Solution {
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        
        //490. The Maze
        //Using BFS
        //Time compleixty : O(m*n)
        //Space compexity : O(m*n)
        
        if(maze == null || maze.length ==0)
            return false;
        
        int rows = maze.length;
        int cols = maze[0].length;
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{start[0],start[1]});
        int [][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        //mark the start as visited
        maze[start[0]][start[1]]= 2;
        
        while(!q.isEmpty()){
            
            
            int[] curr = q.poll();
           
            
            
            //check if the ball has reached the detsination
            if(curr[0] == destination[0] && curr[1] == destination[1])
                return true;
            
            for(int[] dir :dirs){
                
                int i =curr[0];
                int j =curr[1];
                
                while(i>=0 && i<rows && j>=0 && j<cols && maze[i][j]!=1){
                    i = i + dir[0];
                    j = j + dir[1];
                }
                // the ball goes one cell ahead. So need to bring it back to one cell behing
                i = i-dir[0];
                j = j-dir[1];
                
                //now check if the cell has already been visited
                if(maze[i][j]!=2){
                    q.add(new int[]{i,j});
                    maze[i][j] =2; //make it visited
                }
            }
            
        }
        return false;
    }
}