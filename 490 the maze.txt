//490 the maze
public class Solution{
	public boolean hasPath(int[][]maze,int[] start,int[] destination){
	//null
	if(maze==null)return false;
	int m=maze.length;int n=maze[0].length;
	if(start[0]==destination[0] && start[1]==destination[1])return true;
	Queue<int []>q=new LinkedList<>();
	int [][]dirs=new int[][]{{-1,0},{1,0},{0,-1},{0,1}};
	q.add(start);
	maze[start[0]start[1]]=2;
	while(!q.isEmpty()){
	    int [] curr=q.poll();
	    for(int [] dir:dirs){
	        int i = curr[0];
	        int j = curr[1];
	        while(i<m && j<n && i>=0 && j>=0 && maze[i][j]!=1){
	            i+=dir[0];
	            j+=dir[1];
	        }
	        //one Step
	        i-=dir[0];
	        j-=dir[1];
	        if(maze[i][j]!=2){
	            if(i==destination[0] && j==destination[1])return true;
	            q.add(new int[]{i,j});
	            maze[i][j]=2;
	        }
	    }
	}
	return false;
	
	}
}
