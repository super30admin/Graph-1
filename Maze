TC: mn*m+n
class Solution{
public boolean hasPath(int[][] maze, int[] start, int[] destination){
	if(start[0]==destination[0] && start[1]==destination[1]) return true;
	int m=maze.length; int n=maze[0].length;
	Queue<Integer> visited=new LinkedList<>();
	q.add(start[0]); q.add(start[1]); //to put the location in the queue from where we have to start the navigation
	int[][] dirs = new int[][] {{-1,0},{0,-1},{1,0},{0,1}};
	maze[start[0]][start[1]]=2;
	while(!q.isEmpty()){
		int r=q.poll;
		int c=q.poll;
		for(int[] dir: dirs){
		int i=r;int j=c;
		while(i>=0 && i<m && j>=0 && j<n && maze[i][j]!=1){
			i=i+dir[0];
			j=j+dir[1];
		}
		i=i-dir[0];
		j=j-dir[1];
		if(maze[i][j]!=2){
			if(i==destination[0] && j==destination[1]) return true;
			q.add(i); q.add(j);
			maze[i][j] = 2;
		}
	}
	}return false;
}
}
