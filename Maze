//TimeComplexity.  O(m*n)
//SpaceComplexity. O(m*n)


class Solution {
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        
        int m = maze.length;
        int n = maze[0].length;
        
        if(maze == null)return false;
        Queue<int[]> q = new LinkedList<>();
        int[][] dirs = new int[][] {{1,0}, {-1,0}, {0,1}, {0,-1}};
        q.add(start);
        maze[start[0]][start[1]] = 2;
        
        while(!q.isEmpty()){
            
            int[] curr = q.poll();

            for(int [] dir : dirs){
            int i = curr[0];
            int j = curr[1];
                while(i >=0 && j >=0 && i < m && j < n && maze[i][j] != 1){
                    i += dir[0];
                    j += dir[1];
                }
                i -= dir[0];
                j -= dir[1];
                if(i == destination[0] && j == destination[1])return true;
                if(maze[i][j] != 2){
                q.add(new int[]{i,j});
                maze[i][j] = 2;
            }
            }                        
        }        
        return false;
    }
}
