/*
TC: O(mn)
SC: O(n)
 */

class Maze{

    public boolean hasPath(int[][] maze, int[] start, int[] destination) {

        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{start[0],start[1]});
        maze[start[0]][start[1]] = 2;

        int dirs[][] = {{-1,0},{1,0},{0,1},{0,-1}};

        while(!q.isEmpty()){
            int curr[] = q.poll();

            if (curr[0] == destination[0] && curr[1] == destination[1]){
                return true;
            }

            for(int[] dir : dirs){
                int i = curr[0];
                int j = curr[1];

                while(i >= 0 && j >= 0 && i < maze.length && j < maze[0].length &&
                        maze[i][j]!= 1){
                    i += dir[0];
                    j += dir[1];
                }

                i -= dir[0];
                j -= dir[1];

                if (maze[i][j] != 2){
                    q.offer(new int[]{i,j});
                    maze[i][j] =2;
                }
            }
        }
        return false;
    }
}